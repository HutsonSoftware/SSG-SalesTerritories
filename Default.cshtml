@section Scripts {
    <script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?libraries=drawing,geometry&key=AIzaSyDY0kkJiTPVd2U7aTOAwhc9ySH6oHxOIYM&sensor=false"></script>
    <script type="text/javascript">
        var markerFile = './Data/SalonList.cshtml';
        var polygonFile = './Data/TerritoryList.cshtml';
        var defaultLatlng = new google.maps.LatLng(37.1078, -93.2519);
        var defaultZoom = 5;
        var map;
        var markerInfoWindow;
        var markerList = [];
        var polygonList = [];
        var selectedMarker;
        var drawingManager = new google.maps.drawing.DrawingManager({
            drawingControlOptions: {
                drawingModes: [
                    google.maps.drawing.OverlayType.POLYGON
                ]
            }
        });
        var markerInfoWindowHtml = "<table>" +
                 "<tr><td>Salon Name:</td> <td><input type='text' id='name'/> </td> </tr>" +
                 "<tr><td>Street Address:</td> <td><input type='text' id='address'/> </td> </tr>" +
                 "<tr><td>City:</td> <td><input type='text' id='city'/> </td> </tr>" +
                 "<tr><td>State:</td> <td><input type='text' id='state'/> </td> </tr>" +
                 "<tr><td>Zip:</td> <td><input type='text' id='zip'/> </td> </tr>" +
                 "<tr><td>Six Month Sales:</td> <td><input type='text' id='sixMonthSales'/> </td> </tr>" +
                 "<tr><td></td><td><input type='button' value='Save & Close' onclick='saveSalonDataFromForm()'/></td></tr></table>";

        var geocoder = new google.maps.Geocoder();

        $.ajaxSetup({ "error": function (XMLHttpRequest, textStatus, errorThrown) {
            alert(textStatus);
            alert(errorThrown);
            alert(XMLHttpRequest.responseText);
        }
        });

        var myOptions = {
            zoom: defaultZoom,
            center: defaultLatlng,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        }

        function loadMap() {
            map = new google.maps.Map(document.getElementById("googleMap"), myOptions);
            google.maps.event.addListener(map, 'click', addSalonMarker);

            drawingManager.setMap(map);
            google.maps.event.addListener(drawingManager, 'polygoncomplete', polygonComplete);

            markerInfoWindow = new google.maps.InfoWindow({ content: markerInfoWindowHtml });

            google.maps.event.addListener(markerInfoWindow, 'domready', markerInfoWindowLoaded);

            loadMarkers();
            loadPolygons();
        }

        function loadMarkers() {
            $.getJSON(markerFile, function (data) {
                $.each(data, function (i, field) {
                    loadMarker(field);
                });
            });
        }

        function loadMarker(markerData) {
            var myLatlng = new google.maps.LatLng(markerData['Latitude'], markerData['Longitude']);
            var marker = new google.maps.Marker({
                id: markerData['SalonID'],
                name: unescape(markerData['Name']),
                sixMonthSales: markerData['SixMonthSales'],
                map: map,
                position: myLatlng
            });

            markerList.push(marker);

            marker.addListener('click', markerClicked);
            marker.addListener('rightclick', markerRightClicked);
        }

        function loadPolygons() {
            $.getJSON(polygonFile, function (data) {
                $.each(data, function (i, field) {
                    loadPolygon(field);
                });
            });
        }

        function loadPolygon(polygonData) {
            var polygon = new google.maps.Polygon({
                paths: google.maps.geometry.encoding.decodePath(polygonData['EncodedPath']),
                editable: true,
                id: polygonData['TerritoryID']
            });

            polygon.setMap(map);

            polygon.addListener('click', addSalonMarker);
            polygon.addListener('rightclick', polygonRightClicked);
            polygon.addListener('mouseover', polygonMouseOver);
            polygon.addListener('mousemove', polygonMouseMove);
            polygon.addListener('mouseout', polygonMouseOut);

            setAlterationListenersForPolygon(polygon);

            polygonList.push(polygon);
        }

        function markerClicked() {
            selectedMarker = this;

            markerInfoWindow.open(map, this);
        }

        function markerInfoWindowLoaded() {
            $.getJSON('./Data/Salon.cshtml?SalonID=' + selectedMarker.id, function (data) {
                document.getElementById('name').value = unescape(data[0]['Name']);
                document.getElementById('address').value = data[0]['Address'];
                document.getElementById('city').value = data[0]['City'];
                document.getElementById('state').value = data[0]['State'];
                document.getElementById('zip').value = data[0]['Zip'];
                document.getElementById('sixMonthSales').value = data[0]['SixMonthSales'];
            });
        }

        function markerRightClicked() {
            var markerToDelete = this;

            $.getJSON('./Data/Salon.cshtml?SalonID=' + this.id, function (data) {
                var salonName = data[0]['Name'];

                var confirmationResponse = window.confirm("Are you sure you want to delete this salon? (" + salonName + ")");

                if (confirmationResponse) {
                    markerList = filterItem(markerList, markerToDelete);
                    markerToDelete.setMap(null);
                    var salonId = markerToDelete.id;
                    var url = "./Data/DeleteSalon.cshtml?SalonID=" + salonId;
                    $.get(url);
                }
            });
        }

        function polygonRightClicked() {
            var polygonToDelete = this;

            $.getJSON('./Data/DeleteTerritory.cshtml?TerritoryID=' + this.id, function (data) {

                var confirmationResponse = window.confirm("Are you sure you want to delete this territory?");

                if (confirmationResponse) {
                    polygonList = filterItem(polygonList, polygonToDelete);
                    polygonToDelete.setMap(null);
                    var territoryId = polygonToDelete.id;
                    var url = "./Data/DeleteTerritory.cshtml?SalonID=" + territoryId;
                    $.get(url);
                }
            });
        }

        function polygonMouseOver() {
            $('#territoryInfo').empty();
            $('#salonTotal').empty();

            populateTerritoryInfoDiv(this);
        }

        function polygonMouseMove() {
            if (!$('#territoryInfo').html().length) {
                populateTerritoryInfoDiv(this);
            }
        }

        function polygonMouseOut() {
            $('#territoryInfo').empty();
            $('#salonTotal').empty();

            $('#territoryInfo').css('border-bottom-style', 'none');
        }

        function polygonComplete(polygon) {
            polygon.setEditable(true);

            var encodedPath = google.maps.geometry.encoding.encodePath(polygon.getPath());

            polygon.addListener('click', addSalonMarker);
            polygon.addListener('rightclick', polygonRightClicked);
            polygon.addListener('mouseover', polygonMouseOver);
            polygon.addListener('mousemove', polygonMouseMove);
            polygon.addListener('mouseout', polygonMouseOut);

            setAlterationListenersForPolygon(polygon);

            $.getJSON("./Data/InsertTerritory.cshtml?EncodedPath=" + encodedPath, function (data) {
                polygonList.push(polygon);
                polygon.setOptions({ id: data[0]['Column1'] })
            });
        }

        function setAlterationListenersForPolygon(polygon) {
            var path = polygon.getPath();
        
            var polygonAltered = function() {
                var encodedPath = google.maps.geometry.encoding.encodePath(path);
        
                $.get("./Data/UpdateTerritory.cshtml?TerritoryID=" + polygon.id + "&EncodedPath=" + encodedPath);
            };
        
            google.maps.event.addListener(path, 'set_at', polygonAltered);
            google.maps.event.addListener(path, 'insert_at', polygonAltered);
        }

        function addSalonMarker(event) {
            marker = new google.maps.Marker({
                name: 'My New Salon',
                sixMonthSales: 0.0,
                position: event.latLng,
                map: map
            });

            addSalonToDatabase(marker);
            markerList.push(marker);

            marker.addListener('click', markerClicked);
            marker.addListener('rightclick', markerRightClicked);
        }

        function addSalonToDatabase(marker) {
            //we attempt here to fill in some of the geographical information for the user using google's geocoder API
            geocoder.geocode({ location: marker.getPosition() }, function (geocoderResult) {
                var queryString = createSalonQueryString(marker, geocoderResult);

                var url = "./Data/InsertSalon.cshtml?" + queryString;

                $.post(url, function (data) {
                    var salonID = $.parseJSON(data)[0].Column1;
                    marker.setOptions({ id: salonID });
                });
            });
        }

        function createSalonQueryString(marker, geocoderResult) {
            var addressComponents = geocoderResult[0]['address_components'];

            if (addressComponents) {
                var city = findAddressComponent(addressComponents, 'locality'); //a city
                var state = findAddressComponent(addressComponents, 'administrative_area_level_1'); //a state, by google's definition
                var zip = findAddressComponent(addressComponents, 'postal_code');
                var route = findAddressComponent(addressComponents, 'route');
                var streetNumber = findAddressComponent(addressComponents, 'street_number')
            }

            var queryString = "Latitude=" + marker.getPosition().lat() + "&Longitude=" + marker.getPosition().lng();

            if (city) {
                queryString += "&City=" + city;
            }

            if (state) {
                queryString += "&State=" + state;
            }

            if (zip) {
                queryString += "&Zip=" + zip;
            }

            if (route && streetNumber) {
                queryString += "&Address=" + streetNumber + ' ' + route;
            }

            return queryString;
        }

        function findAddressComponent(addressComponents, type) {
            for (component in addressComponents) {
                component = addressComponents[component];
                for (componentType in component['types']) {
                    if (type == component['types'][componentType]) {
                        return component['short_name'];
                    }
                }
            }

            return undefined;
        }

        function saveSalonDataFromForm() {
            event.stopPropagation();

            var salonName = escape(document.getElementById('name').value);
            var address = escape(document.getElementById('address').value);
            var city = escape(document.getElementById('city').value);
            var state = escape(document.getElementById('state').value);
            var zip = escape(document.getElementById('zip').value);
            var sixMonthSales = escape(document.getElementById('sixMonthSales').value);

            selectedMarker.name = unescape(salonName);
            selectedMarker.sixMonthSales = sixMonthSales;

            var salesRegex = new RegExp("[0-9]+(\.?[0-9]*)?");
            if (!salesRegex.test(sixMonthSales)) {
                alert('Please enter a valid decimal number for the six month sales.');
            } else {
                var url = "./Data/UpdateSalon.cshtml?Name=" + salonName + "&Address=" + address + "&City=" + city + "&State=" + state + "&Zip=" + zip + "&SixMonthSales=" + sixMonthSales + "&SalonID=" + selectedMarker.id;
                $.post(url);
                markerInfoWindow.close();
            }
        }

        function populateTerritoryInfoDiv(polygon) {
            var mappings = calculateMarkerPolygonMappings(markerList, [polygon]);
            var salonsInPolygon = mappings[polygon];
            var territoryInfoDiv = $('#territoryInfo');
            var salesTotal = 0.0;

            $.each(salonsInPolygon, function (i, salon) {
                territoryInfoDiv.append('<p>' + salon.name + '</p>');
                territoryInfoDiv.css('border-bottom-style', 'solid');
                salesTotal += parseFloat(salon.sixMonthSales);
            });

            $('#salonTotal').append('<p>Total six month sales: $' + salesTotal + '</p>');
        }

        function calculateMarkerPolygonMappings(markers, polygons) {
            var mappings = {};

            for (polygon in polygons) {
                polygon = polygons[polygon];
                var containedMarkers = [];
                for (marker in markers) {
                    marker = markers[marker];
                    if (google.maps.geometry.poly.containsLocation(marker.getPosition(), polygon)) {
                        containedMarkers.push(marker);
                    }
                }
                mappings[polygon] = containedMarkers;
            }

            return mappings;
        }

        function filterItem(items, itemToRemove) {
            var filteredList = [];

            for (item in items) {
                item = items[item];
                if (!(itemToRemove === item)) {
                    filteredList.push(item);
                }
            }

            return filteredList;
        }

        google.maps.event.addDomListener(window, 'load', loadMap);
    </script>
}

@{
    Layout = "~/_SiteLayout.cshtml";
    Page.Title = "Sales Territories";
}

<hgroup class="title">
    <h1>@Page.Title</h1>
    <h2>Salon Map</h2>
</hgroup>

<article>
    <div id="googleMap" style="height: 800px;"></div>
</article>

<div id="territoryInfoContainer" style="height: 800px; float: left; width: 25%; padding-left: 5%">
    <h4>Selected Sales Territory:</h4>
    <div id="territoryInfo">
    </div>
    <div id="salonTotal"></div>
</div>